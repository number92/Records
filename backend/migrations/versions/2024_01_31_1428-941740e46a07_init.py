"""init

Revision ID: 941740e46a07
Revises:
Create Date: 2024-01-31 14:28:18.474381

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "941740e46a07"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "specialists",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("middle_name", sa.String(length=256), nullable=False),
        sa.Column("last_name", sa.String(length=256), nullable=False),
        sa.Column("telegram_id", sa.String(), nullable=False),
        sa.Column("phone", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "specializations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("telegram_id", sa.String(), nullable=False),
        sa.Column("phone", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "profileinfospecialists",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("specialist", sa.Integer(), nullable=False),
        sa.Column("start_work", sa.Time(), nullable=False),
        sa.Column("end_work", sa.Time(), nullable=False),
        sa.Column("busy_time", postgresql.ARRAY(sa.Time()), nullable=True),
        sa.ForeignKeyConstraint(
            ["specialist"], ["specialists.id"], ondelete="cascade"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("specialist"),
    )
    op.create_table(
        "services",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("duration", sa.Integer(), nullable=False),
        sa.Column("specialization_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["specialization_id"], ["specializations.id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "records",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("time", sa.Time(), nullable=False),
        sa.Column("is_free", sa.Boolean(), nullable=True),
        sa.Column("note", sa.String(length=256), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("specialist_id", sa.Integer(), nullable=False),
        sa.Column("service_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["service_id"],
            ["services.id"],
        ),
        sa.ForeignKeyConstraint(
            ["specialist_id"],
            ["specialists.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "date",
            "time",
            "specialist_id",
            name="idx_unique_datetime_specialist",
        ),
        sa.UniqueConstraint(
            "date", "time", "user_id", name="idx_unique_datetime_user"
        ),
    )
    op.create_table(
        "specialist_service_association",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("price", sa.Integer(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("service_id", sa.Integer(), nullable=False),
        sa.Column("specialist_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["service_id"],
            ["services.id"],
        ),
        sa.ForeignKeyConstraint(
            ["specialist_id"],
            ["specialists.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "service_id", "specialist_id", name="idx_unique_service_specialist"
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("specialist_service_association")
    op.drop_table("records")
    op.drop_table("services")
    op.drop_table("profileinfospecialists")
    op.drop_table("users")
    op.drop_table("specializations")
    op.drop_table("specialists")
    # ### end Alembic commands ###
