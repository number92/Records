"""add constraint datetime

Revision ID: b544c4d051a1
Revises: 2f41a0143c50
Create Date: 2024-01-15 14:07:22.435819

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "b544c4d051a1"
down_revision: Union[str, None] = "2f41a0143c50"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "records", sa.Column("note", sa.String(length=256), nullable=True)
    )
    op.add_column(
        "records", sa.Column("service_id", sa.Integer(), nullable=False)
    )
    op.alter_column(
        "records", "is_free", existing_type=sa.BOOLEAN(), nullable=True
    )
    op.create_unique_constraint(
        "idx_unique_datetime_specialist",
        "records",
        ["date", "time", "specialist_id"],
    )
    op.create_unique_constraint(
        "idx_unique_datetime_user", "records", ["date", "time", "user_id"]
    )
    op.create_foreign_key(None, "records", "services", ["service_id"], ["id"])
    op.drop_column("records", "title")
    op.drop_column("services", "price")
    op.add_column(
        "specialist_service_association",
        sa.Column("price", sa.Integer(), nullable=True),
    )
    op.add_column(
        "specialist_service_association",
        sa.Column("description", sa.String(), nullable=True),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("specialist_service_association", "description")
    op.drop_column("specialist_service_association", "price")
    op.add_column(
        "services",
        sa.Column("price", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "records",
        sa.Column(
            "title", sa.VARCHAR(length=256), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(None, "records", type_="foreignkey")
    op.drop_constraint("idx_unique_datetime_user", "records", type_="unique")
    op.drop_constraint(
        "idx_unique_datetime_specialist", "records", type_="unique"
    )
    op.alter_column(
        "records", "is_free", existing_type=sa.BOOLEAN(), nullable=False
    )
    op.drop_column("records", "service_id")
    op.drop_column("records", "note")
    # ### end Alembic commands ###
